
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141204 (SVN rev 60)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141204 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\110\000\002\002\003\000\002\002\004\000\002\016" +
    "\004\000\002\016\002\000\002\026\002\000\002\027\002" +
    "\000\002\017\020\000\002\017\012\000\002\030\002\000" +
    "\002\024\005\000\002\024\002\000\002\015\004\000\002" +
    "\015\004\000\002\031\002\000\002\032\002\000\002\003" +
    "\011\000\002\004\004\000\002\004\002\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\033\002\000\002\007\006\000\002\034" +
    "\002\000\002\010\006\000\002\035\002\000\002\036\002" +
    "\000\002\037\002\000\002\012\014\000\002\040\002\000" +
    "\002\013\016\000\002\041\002\000\002\014\010\000\002" +
    "\023\003\000\002\023\003\000\002\042\002\000\002\011" +
    "\010\000\002\043\002\000\002\011\006\000\002\011\010" +
    "\000\002\044\002\000\002\006\007\000\002\006\006\000" +
    "\002\025\006\000\002\025\005\000\002\025\006\000\002" +
    "\022\007\000\002\022\006\000\002\021\004\000\002\021" +
    "\003\000\002\020\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\005\000\002\020\005\000\002\020\005\000" +
    "\002\020\005\000\002\020\005\000\002\020\005\000\002" +
    "\020\004\000\002\045\002\000\002\020\006\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\006\017\ufff4\047\ufff4\001\002\000\006\017" +
    "\ufffe\047\ufffe\001\002\000\004\002\001\001\002\000\004" +
    "\002\007\001\002\000\004\002\000\001\002\000\006\017" +
    "\013\047\012\001\002\000\006\017\uffff\047\uffff\001\002" +
    "\000\010\024\032\025\020\053\201\001\002\000\004\020" +
    "\014\001\002\000\024\021\ufff3\022\ufff3\023\ufff3\024\ufff3" +
    "\025\ufff3\031\ufff3\037\ufff3\045\ufff3\053\ufff3\001\002\000" +
    "\024\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\031\ufff0" +
    "\037\ufff0\045\ufff0\053\ufff0\001\002\000\024\021\033\022" +
    "\017\023\030\024\032\025\020\031\035\037\024\045\042" +
    "\053\025\001\002\000\004\053\176\001\002\000\004\053" +
    "\uffda\001\002\000\004\053\163\001\002\000\040\021\ufff1" +
    "\022\ufff1\023\ufff1\024\ufff1\025\ufff1\031\ufff1\034\ufff1\035" +
    "\ufff1\037\ufff1\044\ufff1\045\ufff1\046\ufff1\051\ufff1\052\ufff1" +
    "\053\ufff1\001\002\000\006\036\160\053\104\001\002\000" +
    "\004\053\145\001\002\000\010\010\112\012\111\036\141" +
    "\001\002\000\040\021\uffef\022\uffef\023\uffef\024\uffef\025" +
    "\uffef\031\uffef\034\uffef\035\uffef\037\uffef\044\uffef\045\uffef" +
    "\046\uffef\051\uffef\052\uffef\053\uffef\001\002\000\040\021" +
    "\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\031\uffe9\034\uffe9" +
    "\035\uffe9\037\uffe9\044\uffe9\045\uffe9\046\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\001\002\000\014\010\050\030\044\053\043" +
    "\054\045\055\047\001\002\000\040\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\031\uffeb\034\uffeb\035\uffeb\037\uffeb" +
    "\044\uffeb\045\uffeb\046\uffeb\051\uffeb\052\uffeb\053\uffeb\001" +
    "\002\000\004\053\uffdb\001\002\000\004\002\ufff2\001\002" +
    "\000\040\021\uffee\022\uffee\023\uffee\024\uffee\025\uffee\031" +
    "\uffee\034\uffee\035\uffee\037\uffee\044\uffee\045\uffee\046\uffee" +
    "\051\uffee\052\uffee\053\uffee\001\002\000\014\010\050\030" +
    "\044\053\043\054\045\055\047\001\002\000\004\032\124" +
    "\001\002\000\040\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\031\uffea\034\uffea\035\uffea\037\uffea\044\uffea\045\uffea" +
    "\046\uffea\051\uffea\052\uffea\053\uffea\001\002\000\040\021" +
    "\uffec\022\uffec\023\uffec\024\uffec\025\uffec\031\uffec\034\uffec" +
    "\035\uffec\037\uffec\044\uffec\045\uffec\046\uffec\051\uffec\052" +
    "\uffec\053\uffec\001\002\000\040\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\031\uffed\034\uffed\035\uffed\037\uffed\044" +
    "\uffed\045\uffed\046\uffed\051\uffed\052\uffed\053\uffed\001\002" +
    "\000\014\010\050\030\044\053\043\054\045\055\047\001" +
    "\002\000\050\004\uffbe\005\uffbe\006\uffbe\007\uffbe\010\112" +
    "\011\uffbe\012\111\014\uffbe\015\uffbe\016\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\032\uffbe\033\uffbe\043\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\001\002\000\014\010\050\030\044\053\043\054" +
    "\045\055\047\001\002\000\046\004\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\014\uffbc\015\uffbc\016\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\043\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\001\002\000\046\004\uffbd\005\uffbd\006" +
    "\uffbd\007\uffbd\010\uffbd\011\uffbd\014\uffbd\015\uffbd\016\uffbd" +
    "\026\uffbd\027\uffbd\030\uffbd\032\uffbd\033\uffbd\043\uffbd\053" +
    "\104\054\uffbd\055\uffbd\001\002\000\046\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\011\uffbb\014\uffbb\015\uffbb\016" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\032\uffbb\033\uffbb\043\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\001\002\000\014\010\050\030" +
    "\044\053\043\054\045\055\047\001\002\000\026\004\056" +
    "\005\053\006\061\007\054\014\063\015\055\016\057\026" +
    "\064\027\062\043\060\001\002\000\046\004\uffba\005\uffba" +
    "\006\uffba\007\uffba\010\uffba\011\uffba\014\uffba\015\uffba\016" +
    "\uffba\026\uffba\027\uffba\030\uffba\032\uffba\033\uffba\043\uffba" +
    "\053\uffba\054\uffba\055\uffba\001\002\000\014\010\050\030" +
    "\044\053\043\054\045\055\047\001\002\000\014\010\050" +
    "\030\044\053\043\054\045\055\047\001\002\000\014\010" +
    "\050\030\044\053\043\054\045\055\047\001\002\000\014" +
    "\010\050\030\044\053\043\054\045\055\047\001\002\000" +
    "\014\010\050\030\044\053\043\054\045\055\047\001\002" +
    "\000\024\022\uffdd\023\uffdd\024\uffdd\025\uffdd\031\uffdd\037" +
    "\uffdd\045\uffdd\046\uffdd\053\uffdd\001\002\000\014\010\050" +
    "\030\044\053\043\054\045\055\047\001\002\000\014\010" +
    "\050\030\044\053\043\054\045\055\047\001\002\000\014" +
    "\010\050\030\044\053\043\054\045\055\047\001\002\000" +
    "\014\010\050\030\044\053\043\054\045\055\047\001\002" +
    "\000\046\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011" +
    "\uffc3\014\uffc3\015\uffc3\016\uffc3\026\uffc3\027\uffc3\030\uffc3" +
    "\032\uffc3\033\uffc3\043\uffc3\053\uffc3\054\uffc3\055\uffc3\001" +
    "\002\000\046\004\056\005\053\006\061\007\054\010\uffc6" +
    "\011\uffc6\014\uffc6\015\055\016\057\026\064\027\062\030" +
    "\uffc6\032\uffc6\033\uffc6\043\uffc6\053\uffc6\054\uffc6\055\uffc6" +
    "\001\002\000\046\004\uffc2\005\uffc2\006\uffc2\007\uffc2\010" +
    "\uffc2\011\uffc2\014\uffc2\015\uffc2\016\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\032\uffc2\033\uffc2\043\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\001\002\000\046\004\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\014\uffc8\015\uffc8\016\uffc8\026\064\027" +
    "\062\030\uffc8\032\uffc8\033\uffc8\043\uffc8\053\uffc8\054\uffc8" +
    "\055\uffc8\001\002\000\024\022\ufff0\023\ufff0\024\ufff0\025" +
    "\ufff0\031\ufff0\037\ufff0\045\ufff0\046\ufff0\053\ufff0\001\002" +
    "\000\024\022\017\023\030\024\032\025\020\031\035\037" +
    "\024\045\042\046\073\053\025\001\002\000\040\021\uffdc" +
    "\022\uffdc\023\uffdc\024\uffdc\025\uffdc\031\uffdc\034\uffdc\035" +
    "\uffdc\037\uffdc\044\uffdc\045\uffdc\046\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\001\002\000\046\004\056\005\053\006\061\007" +
    "\054\010\uffc4\011\uffc4\014\uffc4\015\uffc4\016\uffc4\026\064" +
    "\027\062\030\uffc4\032\uffc4\033\uffc4\043\uffc4\053\uffc4\054" +
    "\uffc4\055\uffc4\001\002\000\046\004\uffca\005\uffca\006\061" +
    "\007\054\010\uffca\011\uffca\014\uffca\015\uffca\016\uffca\026" +
    "\064\027\062\030\uffca\032\uffca\033\uffca\043\uffca\053\uffca" +
    "\054\uffca\055\uffca\001\002\000\046\004\056\005\053\006" +
    "\061\007\054\010\uffc5\011\uffc5\014\uffc5\015\uffc5\016\uffc5" +
    "\026\064\027\062\030\uffc5\032\uffc5\033\uffc5\043\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\001\002\000\046\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\026\064\027\062\030\uffc7\032\uffc7\033\uffc7\043\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\001\002\000\046\004\uffc9\005" +
    "\uffc9\006\061\007\054\010\uffc9\011\uffc9\014\uffc9\015\uffc9" +
    "\016\uffc9\026\064\027\062\030\uffc9\032\uffc9\033\uffc9\043" +
    "\uffc9\053\uffc9\054\uffc9\055\uffc9\001\002\000\026\004\056" +
    "\005\053\006\061\007\054\011\uffc0\014\063\015\055\016" +
    "\057\026\064\027\062\001\002\000\004\011\103\001\002" +
    "\000\046\004\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf\011" +
    "\uffbf\014\uffbf\015\uffbf\016\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\032\uffbf\033\uffbf\043\uffbf\053\uffbf\054\uffbf\055\uffbf\001" +
    "\002\000\004\012\105\001\002\000\004\054\106\001\002" +
    "\000\004\013\107\001\002\000\054\004\uffce\005\uffce\006" +
    "\uffce\007\uffce\010\uffce\011\uffce\014\uffce\015\uffce\016\uffce" +
    "\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\032\uffce\033" +
    "\uffce\036\uffce\043\uffce\053\uffce\054\uffce\055\uffce\001\002" +
    "\000\046\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011" +
    "\uffc1\014\uffc1\015\uffc1\016\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\032\uffc1\033\uffc1\043\uffc1\053\uffc1\054\uffc1\055\uffc1\001" +
    "\002\000\004\054\122\001\002\000\016\010\050\011\115" +
    "\030\044\053\043\054\045\055\047\001\002\000\040\004" +
    "\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\011\121\014\uffbd" +
    "\015\uffbd\016\uffbd\026\uffbd\027\uffbd\030\uffbd\053\104\054" +
    "\uffbd\055\uffbd\001\002\000\016\010\050\011\117\030\044" +
    "\053\043\054\045\055\047\001\002\000\046\004\uffd0\005" +
    "\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\026\uffd0\027\uffd0\030\uffd0\032\uffd0\033\uffd0\043" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\001\002\000\040\004\056" +
    "\005\053\006\061\007\054\010\uffcb\011\uffcb\014\063\015" +
    "\055\016\057\026\064\027\062\030\uffcb\053\uffcb\054\uffcb" +
    "\055\uffcb\001\002\000\046\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\014\uffd1\015\uffd1\016\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\032\uffd1\033\uffd1\043\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\001\002\000\040\004\056\005\053\006\061" +
    "\007\054\010\uffcc\011\uffcc\014\063\015\055\016\057\026" +
    "\064\027\062\030\uffcc\053\uffcc\054\uffcc\055\uffcc\001\002" +
    "\000\046\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\026\uffcf\027\uffcf\030\uffcf" +
    "\032\uffcf\033\uffcf\043\uffcf\053\uffcf\054\uffcf\055\uffcf\001" +
    "\002\000\004\013\123\001\002\000\054\004\uffcd\005\uffcd" +
    "\006\uffcd\007\uffcd\010\uffcd\011\uffcd\014\uffcd\015\uffcd\016" +
    "\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\032\uffcd" +
    "\033\uffcd\036\uffcd\043\uffcd\053\uffcd\054\uffcd\055\uffcd\001" +
    "\002\000\040\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\031\uffe8\034\uffe8\035\uffe8\037\uffe8\044\uffe8\045\uffe8\046" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\001\002\000\026\004\056" +
    "\005\053\006\061\007\054\014\063\015\055\016\057\026" +
    "\064\027\062\033\uffe3\001\002\000\004\033\127\001\002" +
    "\000\024\022\uffe2\023\uffe2\024\uffe2\025\uffe2\031\uffe2\034" +
    "\uffe2\037\uffe2\045\uffe2\053\uffe2\001\002\000\024\022\ufff0" +
    "\023\ufff0\024\ufff0\025\ufff0\031\ufff0\034\ufff0\037\ufff0\045" +
    "\ufff0\053\ufff0\001\002\000\024\022\017\023\030\024\032" +
    "\025\020\031\035\034\132\037\024\045\042\053\025\001" +
    "\002\000\024\022\uffe1\023\uffe1\024\uffe1\025\uffe1\031\uffe1" +
    "\035\uffe1\037\uffe1\045\uffe1\053\uffe1\001\002\000\024\022" +
    "\ufff0\023\ufff0\024\ufff0\025\ufff0\031\ufff0\035\ufff0\037\ufff0" +
    "\045\ufff0\053\ufff0\001\002\000\024\022\017\023\030\024" +
    "\032\025\020\031\035\035\135\037\024\045\042\053\025" +
    "\001\002\000\040\021\uffe0\022\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\031\uffe0\034\uffe0\035\uffe0\037\uffe0\044\uffe0\045\uffe0" +
    "\046\uffe0\051\uffe0\052\uffe0\053\uffe0\001\002\000\026\004" +
    "\056\005\053\006\061\007\054\014\063\015\055\016\057" +
    "\026\064\027\062\032\uffe7\001\002\000\004\032\140\001" +
    "\002\000\040\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6" +
    "\031\uffe6\034\uffe6\035\uffe6\037\uffe6\044\uffe6\045\uffe6\046" +
    "\uffe6\051\uffe6\052\uffe6\053\uffe6\001\002\000\014\010\050" +
    "\030\044\053\043\054\045\055\047\001\002\000\026\004" +
    "\056\005\053\006\061\007\054\014\063\015\055\016\057" +
    "\026\064\027\062\032\uffd4\001\002\000\004\032\144\001" +
    "\002\000\040\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3" +
    "\031\uffd3\034\uffd3\035\uffd3\037\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\051\uffd3\052\uffd3\053\uffd3\001\002\000\004\040\146" +
    "\001\002\000\004\054\147\001\002\000\004\041\150\001" +
    "\002\000\004\054\151\001\002\000\004\042\152\001\002" +
    "\000\004\054\153\001\002\000\004\043\154\001\002\000" +
    "\024\022\uffdf\023\uffdf\024\uffdf\025\uffdf\031\uffdf\037\uffdf" +
    "\044\uffdf\045\uffdf\053\uffdf\001\002\000\024\022\ufff0\023" +
    "\ufff0\024\ufff0\025\ufff0\031\ufff0\037\ufff0\044\ufff0\045\ufff0" +
    "\053\ufff0\001\002\000\024\022\017\023\030\024\032\025" +
    "\020\031\035\037\024\044\157\045\042\053\025\001\002" +
    "\000\040\021\uffde\022\uffde\023\uffde\024\uffde\025\uffde\031" +
    "\uffde\034\uffde\035\uffde\037\uffde\044\uffde\045\uffde\046\uffde" +
    "\051\uffde\052\uffde\053\uffde\001\002\000\014\010\050\030" +
    "\044\053\043\054\045\055\047\001\002\000\026\004\056" +
    "\005\053\006\061\007\054\014\063\015\055\016\057\026" +
    "\064\027\062\032\162\001\002\000\040\021\uffd2\022\uffd2" +
    "\023\uffd2\024\uffd2\025\uffd2\031\uffd2\034\uffd2\035\uffd2\037" +
    "\uffd2\044\uffd2\045\uffd2\046\uffd2\051\uffd2\052\uffd2\053\uffd2" +
    "\001\002\000\010\012\165\032\uffd7\036\164\001\002\000" +
    "\014\010\050\030\044\053\043\054\045\055\047\001\002" +
    "\000\004\054\170\001\002\000\004\032\167\001\002\000" +
    "\040\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\031\uffd6" +
    "\034\uffd6\035\uffd6\037\uffd6\044\uffd6\045\uffd6\046\uffd6\051" +
    "\uffd6\052\uffd6\053\uffd6\001\002\000\004\013\171\001\002" +
    "\000\004\032\172\001\002\000\040\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\031\uffd5\034\uffd5\035\uffd5\037\uffd5" +
    "\044\uffd5\045\uffd5\046\uffd5\051\uffd5\052\uffd5\053\uffd5\001" +
    "\002\000\026\004\056\005\053\006\061\007\054\014\063" +
    "\015\055\016\057\026\064\027\062\032\uffd9\001\002\000" +
    "\004\032\175\001\002\000\040\021\uffd8\022\uffd8\023\uffd8" +
    "\024\uffd8\025\uffd8\031\uffd8\034\uffd8\035\uffd8\037\uffd8\044" +
    "\uffd8\045\uffd8\046\uffd8\051\uffd8\052\uffd8\053\uffd8\001\002" +
    "\000\004\032\uffe5\001\002\000\004\032\200\001\002\000" +
    "\040\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\031\uffe4" +
    "\034\uffe4\035\uffe4\037\uffe4\044\uffe4\045\uffe4\046\uffe4\051" +
    "\uffe4\052\uffe4\053\uffe4\001\002\000\004\010\225\001\002" +
    "\000\004\053\203\001\002\000\004\010\ufffd\001\002\000" +
    "\004\010\205\001\002\000\010\011\ufff7\024\ufff9\025\ufff9" +
    "\001\002\000\006\024\032\025\020\001\002\000\004\011" +
    "\210\001\002\000\004\050\211\001\002\000\024\022\ufffc" +
    "\023\ufffc\024\ufffc\025\ufffc\031\ufffc\037\ufffc\045\ufffc\052" +
    "\ufffc\053\ufffc\001\002\000\024\022\ufff0\023\ufff0\024\ufff0" +
    "\025\ufff0\031\ufff0\037\ufff0\045\ufff0\052\ufff0\053\ufff0\001" +
    "\002\000\024\022\017\023\030\024\032\025\020\031\035" +
    "\037\024\045\042\052\214\053\025\001\002\000\014\010" +
    "\050\030\044\053\043\054\045\055\047\001\002\000\026" +
    "\004\056\005\053\006\061\007\054\014\063\015\055\016" +
    "\057\026\064\027\062\032\216\001\002\000\004\051\217" +
    "\001\002\000\006\017\ufffb\047\ufffb\001\002\000\004\053" +
    "\223\001\002\000\010\011\ufff7\024\ufff9\025\ufff9\001\002" +
    "\000\004\011\ufff8\001\002\000\012\011\ufff6\012\111\024" +
    "\ufff6\025\ufff6\001\002\000\012\011\ufff5\024\ufff5\025\ufff5" +
    "\053\104\001\002\000\010\011\ufff7\024\ufff9\025\ufff9\001" +
    "\002\000\004\011\227\001\002\000\004\050\230\001\002" +
    "\000\024\022\ufff0\023\ufff0\024\ufff0\025\ufff0\031\ufff0\037" +
    "\ufff0\045\ufff0\051\ufff0\053\ufff0\001\002\000\024\022\017" +
    "\023\030\024\032\025\020\031\035\037\024\045\042\051" +
    "\232\053\025\001\002\000\006\017\ufffa\047\ufffa\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\230\000\010\002\005\003\004\031\003\001\001\000" +
    "\004\016\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\010\001\001\000\002\001" +
    "\001\000\004\023\201\001\001\000\002\001\001\000\004" +
    "\032\014\001\001\000\004\004\015\001\001\000\030\005" +
    "\021\006\033\007\040\010\037\011\025\012\030\013\036" +
    "\014\026\022\022\023\020\025\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\135\022\045" +
    "\025\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\124\022\045" +
    "\025\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\050\022\045" +
    "\025\051\001\001\000\002\001\001\000\010\020\107\022" +
    "\045\025\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\100\022\045\025\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\077" +
    "\022\045\025\051\001\001\000\010\020\076\022\045\025" +
    "\051\001\001\000\010\020\075\022\045\025\051\001\001" +
    "\000\010\020\074\022\045\025\051\001\001\000\010\020" +
    "\073\022\045\025\051\001\001\000\004\041\070\001\001" +
    "\000\010\020\067\022\045\025\051\001\001\000\010\020" +
    "\066\022\045\025\051\001\001\000\010\020\065\022\045" +
    "\025\051\001\001\000\010\020\064\022\045\025\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\071\001\001\000\030\005" +
    "\021\006\033\007\040\010\037\011\025\012\030\013\036" +
    "\014\026\022\022\023\020\025\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\045\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\115\021\113" +
    "\022\112\025\051\001\001\000\002\001\001\000\010\020" +
    "\117\022\045\025\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\125\001\001\000\002\001\001\000\004\036" +
    "\127\001\001\000\004\004\130\001\001\000\030\005\021" +
    "\006\033\007\040\010\037\011\025\012\030\013\036\014" +
    "\026\022\022\023\020\025\035\001\001\000\004\037\132" +
    "\001\001\000\004\004\133\001\001\000\030\005\021\006" +
    "\033\007\040\010\037\011\025\012\030\013\036\014\026" +
    "\022\022\023\020\025\035\001\001\000\002\001\001\000" +
    "\004\033\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\141\022\045\025\051\001\001\000\004\044" +
    "\142\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\154\001\001\000\004\004\155\001\001\000" +
    "\030\005\021\006\033\007\040\010\037\011\025\012\030" +
    "\013\036\014\026\022\022\023\020\025\035\001\001\000" +
    "\002\001\001\000\010\020\160\022\045\025\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\165\001" +
    "\001\000\010\020\172\022\045\025\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\173" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\034" +
    "\176\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\203\001\001\000" +
    "\002\001\001\000\006\024\206\030\205\001\001\000\006" +
    "\015\220\023\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\211\001\001\000\004\004\212\001\001" +
    "\000\030\005\021\006\033\007\040\010\037\011\025\012" +
    "\030\013\036\014\026\022\022\023\020\025\035\001\001" +
    "\000\010\020\214\022\045\025\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\223" +
    "\001\001\000\006\024\221\030\205\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\225" +
    "\030\205\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\230\001\001\000\030\005\021\006\033\007\040" +
    "\010\037\011\025\012\030\013\036\014\026\022\022\023" +
    "\020\025\035\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




  //classe para permitir salvar tipo do token e o valor.
  class table_symbol {

       private String tipo;
       private String valor;

       table_symbol(String tipo, String valor){
          this.tipo = tipo;
          this.valor = valor;
       }

         table_symbol(String tipo){
          this.tipo = tipo;
       }

       public String getTipo(){
          return tipo;
       }

       public String getValor(){
          return valor;
       }

       public void setValor(String valor){
          this.valor = valor;
       }

  }

/** table of declared symbols -- contains production parts indexed by name */
   private Hashtable<String, table_symbol> symT = new Hashtable<String, table_symbol>();
   private static final String LEFT_PAR = "(";
   private static final String RIGHT_PAR = ")";
   private int POS = 0;
   private int flag = 0;
    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuilder called 'm' with the string 'Error' in it. */
        StringBuilder m = new StringBuilder("Error");
   
        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuilder error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuilder error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
   
        /* Add to the end of the StringBuilder error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuilder 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }
   
    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    public void format_code(){
       for(int i=0; i < POS * 3; i++){
          System.out.print(" ");
       }
    }

    
    public void update_symT(String id, String valor){

       table_symbol t = symT.get(id);
       t.setValor(valor);
       symT.replace(id,t);

    }

    public String check_expr(String e1, String e2){

      String res;
      
      if(! symT.containsKey(e1)) {
           report_fatal_error("Variavel nao declarada: " + e1, null);
      }   

      if(e2 == null){
         table_symbol te1 = symT.get(e1);
         String tp1 = te1.getTipo();
         res = tp1;
      } else {

         if(! symT.containsKey(e2)) {
           report_fatal_error("Variavel nao declarada: " + e1, null);
         }
         
         table_symbol te1 = symT.get(e1);
         table_symbol te2 = symT.get(e2);

         String tp1 = te1.getTipo();
         String tp2 = te2.getTipo();

         if(tp1.equals(tp2)){
           res = tp1;
         } else {
           res =  "FLOAT";
         }
      }
      return "FLOAT";
    }



    /**************** emit code *****************/

    public void emit_program(){

       System.out.print("#include<stdio.h>\n");
       System.out.print("#include<stdlib.h>\n\n");

    }

    public void emit_startprogram(){

       System.out.print("int main(){\n");

    }

 
     public void emit_endprg(){

       System.out.print("}\n");

    }

     public void emit_return(){

       System.out.print("return 0;\n");

    }

    public void emit_semi(){
        System.out.print(";\n");
    }

    public void emit_declare_variable_with_value(String id, String value, String tipo){

       if(symT.containsKey(id)){
          report_fatal_error("Variável duplicada [" + id + "]",null);
       }
       symT.put(id,new table_symbol(tipo,value));
       System.out.print(id + "=" + value); 
              
    }

    public void emit_declare_variable_without_value(String id, String tipo){

      if(symT.containsKey(id)){
          report_fatal_error("Variável duplicada [" + id + "]",null);
       } 

       symT.put(id,new table_symbol(tipo));
       System.out.print(id); 
    }

    public void emit_assign_id_expr(String id, String value){
      
       if(! symT.containsKey(id)) {
           report_fatal_error("Variavel nao declarada: " + id, null);
      } else {    

            System.out.print(id + "=" + value); 
            update_symT(id,value);
      }

    }
    
    public void emit_if(String e){

       System.out.print("if(" + e + ")");
    }


    public void emit_escreva(String id){
      
      if(! symT.containsKey(id)) {
           report_fatal_error("Variavel nao declarada: " + id, null);
      } else {    

         String tipo = (symT.get(id)).getTipo();

         if(tipo.equals("INT")) {
            System.out.print("printf(\"\\n%d\"," + id + ")") ;
         } else {
            System.out.print("printf(\"\\n%f\"," + id + ")");
         }   
      }
    }


   public void emit_leia(String id){

      if(! symT.containsKey(id)) {
           report_fatal_error("Variavel nao declarada: " + id, null);
      } else {    
         String tipo = (symT.get(id)).getTipo();

         if(tipo.equals("INT")) {
            System.out.print("scanf(\"%d\",&" + id + ")");
         } else {
            System.out.print("scanf(\"%f\",&" + id + ")");
         }   
      }
   }


   public void emit_for(String id, String i1, String i2, String i3){
      System.out.print("for(" + id + "=" + i1 + ";" + id + "<" + i2 + ";" + id + "+=" + i3 + "){\n" );
   }

   public void emit_else(){
      System.out.print("else{\n");
   }


   public void emit_while(String e){
      System.out.print("while(" + e + "){\n");     
   }


   public void emit_vector(String id, String num){

      System.out.print(id + "[" + num + "];\n");

   }


   public void emit_func(String id, String e){
      System.out.print(id + "(" + e +");\n");
   }


   public void emit_inteiro(){
      System.out.print("int ");
   }


   public void emit_flutuante(){
      System.out.print("float ");
   }


   public void emit_declare_vector(String t, String id, String i){

      if(symT.containsKey(id)){
         report_fatal_error("Variável duplicada [" + id + "]",null);
      } 

      symT.put(id,new table_symbol(t));
      System.out.print(id + "["+i+"]");

   }


   public String check_id( String id, String i){

      if(! symT.containsKey(id)){
         report_fatal_error("Variável Não declarada [" + id + "]",null);
      } 

      symT.put(id+"["+i+"]",new table_symbol("TANTOFAZ"));
      
      return id+"["+i+"]";

   }


   public void emit_assign_vector(String v, String e){
      
      String id = v.substring(0,v.indexOf("["));

      if(! symT.containsKey(id)) {
         report_fatal_error("Variavel nao declarada: " + id + "[]", null);
      } 
      
      System.out.print(v+"="+e+";\n");
   }


   public String filtro(String v){

      String id = v.substring(0,v.indexOf("["));
      
      if(symT.containsKey(id)){
         symT.put(v,new table_symbol(symT.get(id).getTipo()));
         return v;
      
      } else {
         report_fatal_error("Vetor não declarado " + id, null);
      }

      return null; 

   }


   public void declare_param(String t, String id){

      symT.put(id,new table_symbol(t));
   }


   public void emit_declare_func(String t, String id){
      
      if(symT.containsKey(id)) {
         report_fatal_error("Função duplicada: " + id, null);
      } 

      symT.put(id,new table_symbol(t));

   }


   public String chamafunc_validation(String f){

      String id = f.substring(0,f.indexOf("("));
      if( !symT.containsKey( id ) ) {
         report_fatal_error("Função não declarada: " + id, null);
      }

      symT.put( f, new table_symbol( symT.get(id).getTipo() ) );

      return f;
   }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // s ::= program 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listafuncao ::= listafuncao func 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listafuncao",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listafuncao ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("listafuncao",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.print( id + "( ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 System.out.println("){"); emit_declare_func(t,id); POS++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // func ::= FUNCAO tipo ID NT$0 LPAREN list_param RPAREN STARTFUNC NT$1 list_command RETORNO expr SEMI ENDFUNC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-12)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 format_code(); System.out.println("return " + value + ";\n}\n"); POS--; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-13)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // func ::= FUNCAO ID LPAREN list_param RPAREN STARTFUNC list_command ENDFUNC 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NT$2 ::= 
            {
              String RESULT =null;
 if(flag != 0) System.out.print(","); flag = 1; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // list_param ::= NT$2 param list_param 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // list_param ::= 
            {
              String RESULT =null;
		 flag = 0; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_param",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // param ::= tipo ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 declare_param(t,id); System.out.print(id+" "); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param ::= tipo vetor 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("param",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$3 ::= 
            {
              Object RESULT =null;
 emit_program();               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$4 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 emit_startprogram() ; POS++;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // program ::= NT$3 listafuncao PROGRAM STARTPRG NT$4 list_command ENDPRG 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 format_code(); emit_return(); POS--; format_code(); emit_endprg() ;        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // list_command ::= list_command command 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // list_command ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command ::= declare_variable 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= assign 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command ::= writel 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command ::= readl 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command ::= iff 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // command ::= for 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // command ::= while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // command ::= chamafunc SEMI 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 format_code(); System.out.println(f+";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$5 ::= 
            {
              Object RESULT =null;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 format_code(); emit_escreva(value);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // writel ::= WRITELINE expr NT$5 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("writel",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$6 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 format_code(); emit_leia(id);   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // readl ::= READLINE ID NT$6 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("readl",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$7 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 format_code(); emit_if(e);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$8 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 System.out.println("{"); POS++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$9 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
 POS--; format_code(); emit_endprg(); format_code(); emit_else(); POS++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // iff ::= IFF expr NT$7 THENN NT$8 list_command ELSEE NT$9 list_command ENDELSE 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		 POS--; format_code(); System.out.print("}\n"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iff",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 format_code(); emit_for(id,i1,i2,i3); POS++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // for ::= PARA ID DE INTT ATE INTT PASSO INTT FACA NT$10 list_command FIMPARA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 POS--; format_code(); emit_endprg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$11 ::= 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 format_code(); emit_while(e); POS++; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // while ::= ENQUANTO expr FACA NT$11 list_command FIMENQUANTO 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 POS--; format_code(); emit_endprg(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("while",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tipo ::= DECLINT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "INT"  ; format_code();  emit_inteiro();   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tipo ::= DECLFLOAT 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = "FLOAT"; format_code();  emit_flutuante(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NT$12 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_declare_variable_with_value(id,value,t);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // declare_variable ::= tipo ID ATTRIB expr NT$12 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$13 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 emit_declare_variable_without_value(id,t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declare_variable ::= tipo ID NT$13 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declare_variable ::= tipo ID LBRCKT INTT RBRCKT SEMI 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_declare_vector(t,id,i); emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_variable",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$14 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 format_code(); emit_assign_id_expr(id,value); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assign ::= ID ATTRIB expr NT$14 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String value = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 emit_semi(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assign ::= vetor ATTRIB expr SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 format_code(); emit_assign_vector(v,e);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // chamafunc ::= ID LPAREN expr_list RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id + "("+ e +")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamafunc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // chamafunc ::= ID LPAREN RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = id + "()"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamafunc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // chamafunc ::= ID LPAREN vetor RPAREN 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id+"(" + v + ")"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("chamafunc",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // vetor ::= vetor ID LBRCKT INTT RBRCKT 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(v!=null) RESULT = v + ", " + id+"["+i+"]"; else RESULT = id+"["+i+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // vetor ::= ID LBRCKT INTT RBRCKT 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = id+"["+i+"]"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vetor",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_list ::= expr_list expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e1 +","+ e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_list ::= expr 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = e;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr PLUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "+" + e2;  symT.put(RESULT,new table_symbol(check_expr(e1,e2),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr MINUS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "-" + e2;  symT.put(RESULT,new table_symbol(check_expr(e1,e2),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= expr TIMES expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "*" + e2;  symT.put(RESULT,new table_symbol(check_expr(e1,e2),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= expr DIVIDE expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "/" + e2;  symT.put(RESULT,new table_symbol(check_expr(e1,e2),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr EQUALS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "==" + e2; symT.put(RESULT,new table_symbol(check_expr(e1,e2),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= expr GREATER expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + ">" + e2;  symT.put(RESULT,new table_symbol(check_expr(e1,e2),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= expr LESS expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "<" + e2;  symT.put(RESULT,new table_symbol(check_expr(e1,e2),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= expr E expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "&&" + e2; symT.put(RESULT,new table_symbol(check_expr(e1,e2),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= expr OU expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  e1 + "||" + e2; symT.put(RESULT,new table_symbol(check_expr(e1,e2),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= NAO expr 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =   "!" + e1;  symT.put(RESULT,new table_symbol(check_expr(e1,null),RESULT));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // NT$15 ::= 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 RESULT =  "(" + e1  + ")";symT.put(RESULT,new table_symbol(check_expr(e1,null),RESULT)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= LPAREN expr NT$15 RPAREN 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i;                                                          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= vetor 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = filtro(v);                                         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= INTT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;  symT.put(n,new table_symbol("INT",n));                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= FLOATT 
            {
              String RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n;  symT.put(n,new table_symbol("FLOAT",n));                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= chamafunc 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = chamafunc_validation(f); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
